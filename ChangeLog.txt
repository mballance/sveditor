-- 0.8.9 Release --

- #(3526657) - Treat "_" as part of a word, not delimiter

- #(enh) - Updates to project-paths entry

- #(3529251) - Correct a bug in parsing bind of a hierarchical path

------------------------------------------------------------------------------
-- 0.8.8 Release --

- #(3526097) - Correct parse error with new <expr>; statement

- #(enh) - Enhance template infrastructure with support for user-defined
  template parameters. Currently, integer-, identifier-, and class-type 
  parameters are supported.
  
- #(enh) - Add a form-based editor for the XML-formatted template descriptor file

- #(nobug) - Correct parse error with multi-dimension vectors (eg wire [3:0][3:0])

- #(3527774) - The parser does not handle a #delay statement that uses an array


------------------------------------------------------------------------------
-- 0.8.7 Release --

- #(nobug) - Correct content-assist issue with comparison operators. For example:
  if (a >= <<CONTENT_ASSIST>>
  
- #(3035042) - Correct an issue where sometimes the Override Tasks/Functions
  dialog opens with no content shown.
  
- #(nobug) - Correct an issue with the Override Tasks/Functions dialog that
  caused the classes to not always be listed in class-hierarchy order
  
- #(enh)   - Add initial support for externally-defined SV templates.

- #(enh)   - Add Preferences page to configure template paths

- #(3521770) - User option to disable automatic rebuild of SV Index
    - When Auto-Rebuild is disabled, index rebuild only takes place:
        - On startup if the index is invalid
        - When the user requests a rebuild
  
------------------------------------------------------------------------------
-- 0.8.6 Release --

- #(nobug) - Ensure content assist for macros is provided without name-mapped
 parameters. SV only supports positional parameters for macros.
 
- #(3500603) - Expanded outline-view paths are now saved and restored when
  the file contents change
  
- #(3261116) - Outline view now identifies cases where an update is due to
  the file changing, and does not re-set the editor selection.
  
- #(nobug)   - Debug is now controlled in four levels: off, minimum, medium, and maximum

- #(nobug)   - Update auto-indent to indent `include directives inside current scope (eg package)

- #(enh)     - Add basic template capability for several UVM features:
                 - UVM Agent
                 - UVM Environment
                 - UVM Test
                 - UVM Sequence

------------------------------------------------------------------------------
-- 0.8.5 Release --

- #(3513767) - Correct incorrect outdent for fork/join block

- #(3509102) - Correct update-site name as reported in the update manager

- #(3482303) - Add initial support for configurations. Configurations now parse correctly, 
  are displayed in the outline, and are handled by the indenter

------------------------------------------------------------------------------
-- 0.8.4 Release --

- #(3509696) - add sorting button in outline view

- #(nobug) Add new dialogs to select 'Project Paths' in the SVEditor 
  project properties pages
  
- #(3479754) Correct a parse error with type parameters

- #(3479836) Correct a parse error with initialized associative arrays

------------------------------------------------------------------------------
-- 0.8.3 Release --

- #(nobug) Increase performance of the persistence mechanism used by the indexer
  by around 10x.
  
- #(nobug) Filter 'NullStmt' items from the outline view


------------------------------------------------------------------------------
-- 0.8.2 Release --

- #(3483902) - Parameters declared in tasks not recognized

- #(nobug) - Correct problem with argument-file parser that could result
  in a 'hang'

------------------------------------------------------------------------------
-- 0.8.1 Release --

- #(3482259) - Vectored Delayed Wire type not parsed

- #(nobug)   - Added toggle for `defines in outline view

- #(3486909) - Correct inconsistencies in indenting and indent shifting 
  when spaces are to be inserted instead of tabs
 
------------------------------------------------------------------------------
-- 0.8.0 Release --
- (#2256648) New feature: configurable outline 
	- User can now selectively turn on / off:
	  - Always blocks
	  - Assign statements
	  - Initial statements
	  - Generate blocks
	  - Signal declarations
	  - Module instances
	  - Include files
	  - Task / function declarations

- (#nobug) Correct parse error with in-line 'dist' constraint
------------------------------------------------------------------------------
-- 0.7.9 Release --

- #(3482259)    Vectored Delayed Wire type not parsed correctly

- #(3476740) 	Module Instance Icon not shown in Outline View

- #(3473539) Add colorization of system calls
   - Added colorization of system calls such as $display etc.

- #(3306728) Correct bug in colorizing the compare view when one of the
  documents being compared comes from a Team Provider

- #(3476740) 	Module Instance Icon not shown in Outline View

- #(nobug) Merge in outline-filter changes from Steven

- #(3482997) Correct a bug involving processing of files with a .vh extension

- #(nobug) Add support for user-specified file extensions via the Preference dialog

------------------------------------------------------------------------------
-- 0.7.8 Release --

- #(3469890) 	Case statement with default, now : not parsed correctly
  case (a) 1: b=1'b0; default b=1'b1; endcase now fixed

- #(nobug) Correct a parse error with scoped cast types (eg a = myscope::mytype'(val))

- #(nobug) Correct a parse error with randomize calls without an argument list:
  assert(cls1.randomize with {a==2});

- #(nobug) Correct a parse-bug conflict between type and static reference:
  a::b[1:0]

- #(3470024) 	net declaration with drive strengths not parsing
	wire (strong1, weak0) #tck_delay pad_an12 = pad_an12_r; 

- #(nobug) Improve filtering of forward typedefs during open-declaration operation

------------------------------------------------------------------------------
-- 0.7.7 Release --

- #(nobug) Correct implementation of open-declation for `include files 

- #(3468310) Correct a bug in the template completion processor. Now, the
  content assist trigger is the template name rather than the content prefix

- #(3468309) Correct a bug in the expression scanner. Now, open declaration
  and open type hierarchy works when the cursor is placed both on the head 
  and the tail of a token.

- #(3469088) Correct a parse bug involving declaring a virtual-interface variable
  in a begin/end scope

------------------------------------------------------------------------------
-- 0.7.6 Release --

- #(nobug) Correct indent for non-struct/union typedef 

- #(3464258) Correct null-pointer exception while constructing class hierarchy.

- #(3464297) Correct class-cast exception while browsing hierarchy

- #(nobug) Implement parse support for SV binds

- #(nobug) Correct parse error with iff-conditional cross coverpoints

- #(nobug) Implement parsing for coverpoint transition bins

- #(nobug) Correct parse bug involving conflict between property paren
  expression and sequence match item expression

- #(enh) Implement colorizing support for Eclipse 'diff' editor. Now, 
  keywords and language features are appropriately colorized

- #(enh) Update to Project Explorer integration to mark error-containing 
  files, and their containing folders, with error markers

- #(nobug) Correct an issue with the declaration cache where contents were
  not properly cleared when an index was invalidated

- #(nobug) Correct an issue with path expansion that led linked paths 
  (absolute paths) that existed within the workspace to not be treated
  as equivalent to workspace paths. 

- #(nobug) Correct a case where the file timestamp was not set. This caused
  an index that should be valid to be declared invalid on reload

- #(nobug) Correct an bug involving index iteration across project references.
  This issue was observed in the hierarchy view, since this view is one of 
  the few that still uses index iteration (as opposed to the declaration cache) 

- #(nobug) Correct a bug in the hierarchy viewer where the fields of the
  root class were not correctly displayed

- #(enh) Add basic progress monitor for the hierarchy viewer, since this 
  operation currently can take a long time

------------------------------------------------------------------------------
-- 0.7.5 Release --

- #(3452746) Correct parse bug involving randcase. randcase does not 
  accept a switch expression

- #(nobug) Support local::-qualified variable references in a randomize call

- #(nobug) Add initial support for cross-project references. Any element 
  referenced by the index setup for a project (include files, declarations)
  can be made available to the index of another project by referencing the
  declaring project

- #(nobug) remove portlist from description of Module content assist. 
  Presenting the portlist in the content assist description seems to clutter up 
  the description and doesn't seem to add much value

- #(nobug) Correct a bug with content assist across a class extension 
  hierarchy. Now, content assist properly searches up the class hierarchy

- #(nobug) Correct dump/restore issue involving the UVM library

- #(enh) Add preferences to control how module/instance instantiations are presented
  by content assist. 

------------------------------------------------------------------------------
-- 0.7.4 Release --

- #(3445549) 	Number of paramters for tran and rtran incorrect

- #(3445551) 	Array'ed instances of primitives not recognized
      rtranif1 my_gate3[1:0] ({net4,net5}, {net5,net6}, {net6,net7});

- #(3447506) 	Processor directives protect and endprotect not recognized

- #(nobug) Correct an issue with pre-processor `elsif and subsequent macro 
  defines. 

- #(3452563) 	Rise and fall delays in assign statements not supported

- #(nobug) Correct a build issue with the documentation plugins

------------------------------------------------------------------------------
-- 0.7.3 Release --

- (#3442021) Correct a bug in the Open Declaration implementation that is triggered when
  the line before the open-declaration context contains a comment. For example:
  module a;
  endmodule
  module b;
    // a.
    a a0();
  endmodule

  In this case, the previously-used text analysis would attempt to analyze a.a for open 
  declaration rather than just 'a'.

- (#3442016) Correct a parse bug involving an `include directive with an unterminated
  string without a trailing \n:
  `include "a

------------------------------------------------------------------------------
-- 0.7.2 Release --

- Implement a workaround to maintain support for Eclipse 3.5.x. Eclipse 3.6
introduced support for linked resources at the project level. We want to
maintain support for this, while also allowing SVEditor to run with 3.5. 

- (#3441833) Correct an issue with preferences where the comment-color preference did not
  properly control the color of multi-line comments

- (#3441287) Correct parse bug involving a delay specifier with a trailing based number:
  a <= #1 'd1;

------------------------------------------------------------------------------
-- 0.7.1 Release --

- (#3440393) Correct parse bug involving >>> operator

- (#3440393) Correct parse bug involving K&R-style function prototype:
function void myfunc;
  input a, b;
  output c, d;
  // ...
endfunction

- (#3428296) Correct parse bug involving modport-type field

- (#3421265) Implement support for library paths (-y switch). The index will
  add all files with SV extensions (.sv, .v, .vl) in the specified directory
  to the index file list

------------------------------------------------------------------------------
-- 0.7.0 Release --

- (#nobug) Added support for delay operators formatted:
  #(min_time:type_time:max_time)

- (#nobug) Added support for bitwise XNOR '~^' and '^~'  This is arguably not
  a distinct operator

- (#nobug) Added parameters to Module Content Assist.  Also tried to cleanup
  and do a better job of instantiating ports

- (#nobug) Add parse support for (min:typ:max) assignment w/o #

------------------------------------------------------------------------------
-- 0.6.1.ea13 Release --

- (#3434561) Drive strengths of Primitives not supported
  - Significant update to primitive support including drive strength support,
    improved error messaging, and better parameter checking
- (#nobug)  Added support for always @*
- (#nobug)  Added "disable iff" support to property parsing
- (#nobug)  Added support for interface ports with default values

- (#nobug)  Ensure parameter declarations are correctly displayed in the outline

- Add preferences page for content assist to control formatting of tasks/functions

- Added Content assist for module instantiation

- (#3436267) Correct parser bug involving concatenation and ternary operator

------------------------------------------------------------------------------

-- 0.6.1.ea12 Release --

- (#no bug) Fixed "Toggle Block Comment" - Ctrl-/

- (#3428302) 	mixing explicit connection and connection by port name
   Fixed error generated by implicit port connections

- (#no bug) Have auto instantiated functions instantiate named ports. i.e.
        myfunction (.a(a), .b(b)); vs myfunction (a, b);

- (#3432503) Correct lexing bug involving underscore-containing decimal literals

- (#3433089) Correct parser bug involving event-delayed assignment (a <= @(posedge clk) 10)

- Add beginnings of a 'batch' plug-in to facilitate accessing SVEditor functionality
  from scripts. Currently python scripts are supported.

------------------------------------------------------------------------------

-- 0.6.1.ea11 Release --

- (#3427965) Add parse support for extern constraint declarations

- (#3426561) Environment Variables in files.f.  Corrected the file parser to
  get environment variables from Project Properties > Resource > Linked
  Resources > Path Variables

- (#3429943) Array of module instances - now doesn't flag an error when
  parsing code.  Ports are parsed correctly.

------------------------------------------------------------------------------
-- 0.6.1.ea10 Release --

- Hook up Tab Width preference to override default Eclipse behavior of  
  always translating a tab to 4 spaces

- Correct a bug involving single-line macros with a trailing comment. Correct 
  behavior in this case is to trim the comment, while correct behavior in the 
  multi-line case is to preserve the comments.

- Track include files that cannot be located and only search once for them. 
  This should improve the parse speed 

- Correct a parse bug with delays involving a hierarchical identifier. For example:
  #a.b;

- Hook up the Eclipse Linked Path Variable manager, which enables to user to
  define variables using Preferences->General->Workspace->Linked Resources,
  then refer to them in a .f file or other path used by SVEditor.

------------------------------------------------------------------------------

-- 0.6.1.ea09 Release --

- Add basic auto-indent support at block level for property and sequence

- Add complete set of ignored arguments for Questa vlog compiler

- Change implementation of the IndexIterator override that ensures that 
  content-assist proprosals from the unsaved content of the active file are
  properly supplied. This fixes a bug that was introduced with the addition
  of a declaration cache.

- Small improvements to property parsing 

- Correct bug with Function/Task override dialog and functions with an 
  implicit return type. These functions are now properly implemented.

------------------------------------------------------------------------------
-- 0.6.1.ea08 Release --

- Correct a bug with the global definition cache locating typedefs within
  a package. This was producing a null-pointer exception when content
  assist was invoked on a typedef.

- Enhanced parsing of assertions and sequences. Still incomplete, but much better

------------------------------------------------------------------------------
-- 0.6.1.ea07 Release --

- Correct a bug with sub-including argument files. The Index was improperly
  prepending the index base location to the argument file.

------------------------------------------------------------------------------
-- 0.6.1.ea06 Release --

- Correct bug involving content-assist on a field whose type was also a
  forward-declaration typedef (eg typedef class my_class;). Content assist
  correctly now filters out the forward declarations when searching for 
  the target type

- (#3410621) Add support for `elsif pre-processor directive

- Correct bugs involving content assist on begin/end-block-local variables

------------------------------------------------------------------------------
-- 0.6.1.ea05 Release --

- Correct an auto-indent bug with an initial statement with a single statement
  (not a block)

- Correct an auto-indent bug with struct and union variables

- Correct content-assist issue with scopes within interfaces and modules

- (#3404198) Correct a parse bug with task/function calls having unspecified
  (default) parameters

- (#3232422) Correct auto-complete issue with labeling end of blocks

- Correct parse errors with empty named-mapped task/function parameters:
  function void foo(int a=2, int b=3);
  ...
  foo(.a(), .b()); // same as foo(2, 3) or foo() 

- (#3404207) Correct open-declaration support for struct and union fields

- Add support for argument files that sub-include argument files using the
  -f argument (eg -f sub_argument_file.f)

------------------------------------------------------------------------------
-- 0.6.1.ea04 Release --

- (#3393396) Correct macro-expansion bug with string containing unbalanced paren

- (#3400565) Correct parse error with name-mapped struct initialization

- (#3403127) Correct parse error on a function with implicit vectored return 

- (#3393383) Correct parse error with streaming operators with slice size specified

- Correct a parse bug with initialized struct fields

-- 0.6.1.ea03 Release --

- (#3393397) Correct non-blocking event trigger

- (#3393386) Correct parse bug with packed and signed/unsigned structs

- (#3392717) Add parse support for timeprecision / timeunit directives

- (#3398604) Correct parse error with strength-specified assign

- (#3392733) Correct parse error with virtual interface-parameterized class
  static method invocation

-- 0.6.1.ea02 Release --

- (#3392156) Correct a parse bug with time unit 's'

- (#3392155) Implement parse support for stream operators (eg { << {...}})

- Add a "Global-Declaration Cache" to the index. This permits searching for
  global types (classes, modules, interfaces, functions, packages) without
  iterating through the entire index data structures. 
  The global declaration cache is stored along with the index persistence
  data, and enables operations such as content assist and open declaration
  to be much faster.

- Enhance content assist to search within begin/end scopes -- for example:
  initial begin
    class_type e;
    e.field<<CONTENT_ASSIST>>
  end

- Correct a bug with content assist using task/function parameters. For example:
  task my_task(class_type param);
    param.field<<CONTENT_ASSIST>>
  endtask

- (#3392730) Correct bug in lexing strings containing parens

- (#3392170) Correct bug with generate blocks containing named begin/end blocks

- (#3392161) Correct bug involving strings with embedded comments and backslashes

- (#3392721) Correct parse bug with struct/enum-type variables. For example:
   class c;
       enum {A, B, C} enum_field;
   endclass

-- 0.6.1.ea01 Release --

- Re-release of 0.6.0.ea10. Looks like Eclipse thinks version 'ea10' is less than 'ea9'

- (#3358145) Enhance parser to accept attributes on task/function calls

- (#3362302) Multi-dimensional array parse error (string my_string[][2];)

- (#3354142) Enable module-port-connection content assist when only '.' is
  specified

-- 0.6.0.ea10 Release --

- Tighten up lexing of numbers. Ensure decimal numbers are not parsed as hex numbers. 
  Ensure floating-point constants are parsed correctly.

- (#3358145) Enhance parser to accept attributes on task/function calls

- (#3362302) Multi-dimensional array parse error (string my_string[][2];)

- (#3354142) Enable module-port-connection content assist when only '.' is
  specified


-- 0.6.0.ea9 Release --

- (#3357222) Correct parse error on class type with a virtual-interface 
  parameter.  
  For example: class my_class extends my_super #(virtual my_interface)

- (#3357305) Correct problem with open-declaration in a scope with an assert statement

-- 0.6.0.ea8 Release --

- Add initial support for module-port content assist. This feature helps in
connecting ports of an instantiated module to the instantiating environment

- Correct a bug with Open Declaration for a module type

-- 0.6.0.ea7 Release --

- Correct a problem with inclusion of the new UVM plug-in in the SVEditor feature

-- 0.6.0.ea6 Release --

- Correct lexer bug with whitespace in based numbers, such as "32 'h 2A"

- (#3243605) Correct bug with macro reference adjacent to ':' (eg `A:begin)

-- 0.6.0.ea5 Release --

- Correct parse bug related to parameterized static-reference expressions
  (eg int a = foo #(A)::b;)

- Correct parse bug related to parameterized static-assignment expressions
  (eg foo #(A)::b = 2;)

- Correct a macro-argument processing issue related to string macro arguments
  that contain commas

- Correct a bug in support for unbased, unsigned literals: '0, '1, 'z, 'x

- Correct parse bug with initialized associative arrays

- Correct parse bug involving a delay value derived from a field reference
  (eg #obj.foo;)

- Correct expansion of macros containing embedded parameter references
  (eg `define MY_A_MACRO `define MY(P) `MY_``P``_MACRO)

- Correct parse bug related to type parameters (foo #(unsigned int) bar;)

- Enable macros with embedded single-line comments

- Improve ability to distinguish between type declarations and 
  type-based references

-- 0.6.0.ea4 Release --
- (#3240224) Corrected issue with recursive inclusion of files
- (#3302295) Correct bug in error-recovery logic, resulting in a parser hang
- Correct a bug with parsing port-map wildcards: module_inst A(.*)


-- 0.6.0.ea3 Release --

- Correct a parse error with the '**' operator

- Correct an infinite loop when a parse error occurs in a class scope

- Temporarily disabled file-structure display in the Project Explorer

-- 0.6.0.ea2 Release --

- Correct a few bugs with the editor outline view. 
    - Module instances, imports and a few other things affected by the 
      SVDB structure changes are now correctly displayed.
    - Covergroup items are not expandable now
    - Covergroup options are now displayed correctly

- Correct a parse error with coverpoint sized array bins (bins foo[8] = ...)

- Update 'Rebuild Index' command on the context menu of the Project Explorer
  to immediately request a build of the index after invalidating it.

- Correct open-declaration for super-class reference

-- 0.6.0.ea1 Release --

- Enhance SVEditor to make two time-consuming startup tasks 
  (index-afinity discovery and file parse) threaded operations. 
  This has the effect of making SVEditor open more quickly.

- Major changes to the parser. Nearly all SystemVerilog constructs
  are fully parsed. Previously, many were lexically processed via
  a scanner.

- Use a backing cache for files in the index. This permits faster
  startup time, and should be more scalable, since the database need
  not be entirely in memory

-- 0.4.0 Release --

- (#3181880) Critical bug related to restructuring of the SVDB

- Corrected a bug with the Outline view, also due to SVDB restructuring 

------------------------------------------------------------------------------

-- 0.3.9 Release --

- Correct a problem with the SVEditor Outline view that prevented the viewer
  from updating in response to on-the-fly changes in the editor. 

- Correct parse bug related to pre- and post- increment/decrement expressions

- (#3176354) Update parser to correctly support all gate-level primitives

- (#3177127) Correct a problem with relative include paths that extend above 
  the workspace location.

- (#3176424) Corrected the functionality of the Edit button on the  
  Source Collections project properties tab.

------------------------------------------------------------------------------

-- 0.3.8 Release --

- (#3159790) Correct critical bug in windows file-pattern matching

------------------------------------------------------------------------------

-- 0.3.7 Release --

- Fix bugs in build of 'Developer Docs' plugin-in

- Enable handling of enum forward-declaration in the parser

- (#3153829) Change 'shadow' SourceCollection index, which is created when a file outside
  an existing index is opened, to only index sources in the top-level directory.

- Update the file-finding code (used by SourceCollection) to identify and
  skip excluded directories. This makes search more efficient.
  Should resolve (#3152333)

- Change the marker-propagation mechanism to work properly when triggered via
  a file-change event. This should result in more-reliable error propagation.
  This appears to resolve (#3154474)


------------------------------------------------------------------------------

-- 0.3.6 Release --

- Integrate the current 'Getting Started' guide into the Eclipse help system.

- Add initial "SVEditor Internals" documentation -- for now, just the 
  JavaDoc-created API document.

------------------------------------------------------------------------------

-- 0.3.5 Release --

- Improve support for parsing and preserving import statements. Imports are
  parsed and represented in the AST, as well as being shown in the Outline view.
  This improved support also resolves issue #3135375.
  

- Add Initial Eclipse Search support. Search can now be accessed via the
  Search->SystemVerilog menu item (or, alternatively, the SystemVerilog tab
  on the Search dialog). 
  - Searching for declarations is supported (reference search unsupported)
  - Searching for Types, Methods, Packages, and Fields supported
  - The 'List' format for search results has reasonable support, while the
    'Tree' format is mostly unimplemented

- Change SVDBLocation to track line position in addition to line number. 

- Implement styled text for label providers. The effect of this change can be
  observed in the Outline view. Field types and function return types are now
  displayed with different styling than the name of the function/field.

- [Internal API] Update the ISVDBItemIterator interface to support contextual 
  scanning. This allows the client to, for example, scan to the next package 
  declaration without seeing all elements in between.

- Add a version to the saved parse database. This enables a better message to
  the user when a new SVEditor version chooses to rebuild a database due to
  a format difference. 

------------------------------------------------------------------------------

-- 0.3.4 Release --

- Add parse support for 'defparam'

- (#3135411) Correct auto-indent bug in moving a non-whitespace line down.

- Correct auto-indent bug involving leading whitespace when moving a
  line down the page.

- (#3127392,3141758) Add support for module hierarchy display via the 'F4' 
  shortcut


------------------------------------------------------------------------------

-- 0.3.3 Release --

- (#3124078) Resolve parse error with delayed assign

- Correct a bug with the Library Index related to relative include paths 
  that extend outside the project directory. 

- (#3115121) Enable 'Open Declaration' for updir-relative include paths 
  (eg `include "../../../my_h.svh").

- Parser/scanner now parses through more of the behavioral block statements. Since 
  there are many SystemVerilog statements that don't end with a ';', this makes
  parsing more reliable.

- Correct parse errors discovered when adding tests based on OpenCores projects
    - Correct a parse error with 'if' statements attached to an always.
      Enhanced parser to begin parsing through behavioral statements
    - Enhanced parser to allow initialized nets
    - Correct parser bug with reduction operators in expressions
    - Correct a parse error with concatenations in assigns
    - Correct parse bug with non-ansi task/function parameter declarations
    - Enable multiple comma-separated module instances
    - Enable basic parsing of specify blocks
    - Enable basic parsing of pullup/pulldown
    - Correct a pre-processor problem with macro arguments that are 
      concatenations
    - Enhance the pre-processor to exclude single-line comments from
      macro definitions, while including multi-line comments

- Correct a problem with deeply-nested macro expansion where a trailing ')' was left
  in the expansion text

- (#3123564) Fix parse error with import statements prior to the module
  port declaration


------------------------------------------------------------------------------

-- 0.3.2 Release --

- (#3118954) Correct a parse error with sized references to an enum type

- (#3118954) Correct a problem parsing content after a package declaration

- (#3118945) Add a filter to the editor to gracefully deal with files that 
  contain \r-delimited lines. Generally, this results when a file created on
  the Windows OS is mangled in some form. \r-delimited lines will be 
  automatically transformed to \r\n-delimited lines and a message will be 
  displayed in the console.

- Fix an issue with FileSystem indexing, where adding a new file to the 
  FileSystem and attempting to open it causes the index to report that
  the file "isn't in the FileTree Map". Solve by re-building the index
  whenever a file is opened that exists on the FileSystem but isn't in the
  FileTreeMap

- (#3121178) Correct a windows-path issue that caused an opened file to
  be associated with the wrong index, and consequently an internal error.

------------------------------------------------------------------------------

-- 0.3.1 Release --

- (#2970554) Correct a crash due to a missing file when debug logging was
  enabled.

- (#3031087) Support CTRL+SHIFT+F binding for formatting file

- Correct indenting of always_comb, always_latch, and always_ff blocks

- (#3118081) Correct paste bug related to always_comb 

- (#3118472) Correct outdent bug with empty enum declaration.

- Correct a bug when pasting text that does not end with a newline. Previously,
  the last token of the pasted text (eg endmodule) would often be dropped. 
  Interestingly enough, this bug was being masked by a bug in the test
  results comparison.

- Support proper indent of forward typedef enum (eg typedef enum A;)

- (#3118342) Added a workaround for interoperatbility of tabs and spaces in 
  'insert-spaces' mode. It seems Eclipse tries to be 'smart' and insert
  fewer spaces based on the number of preceeding tabs on the line. For example,
  if the line starts with 1 tab, then a subsequent space-inserting tab will
  only insert 3 spaces. If the line starts with 2 tabs, then only two
  spaces will be inserted. 

- (#3118464) Corrected a problem with content assist in an empty file

- (#3115123) Initial implementation of Add/Remove Block Comment operations.
   CTRL+SHIFT+/ comments selected block, while CTRL+SHIFT+\ uncomments block

------------------------------------------------------------------------------

-- 0.3.0 Release --

- Correct parse errors with assignment expressions containing complement (~)
  and system tasks (eg $abs(a))

- Correct a bug with indenting of nested modules

- (#3110581) Enable use of indenting-related preferences in the 
  General->Editors->Text Editors category. Now, indent and auto-indent respect
  the 'Insert spaces for tabs' preference and use the 'Displayed tab width'
  preference to select how many spaces to indent.

- (#3115322) Fix a problem with the pre-processor that prevented files with
  unbalanced pre-processor conditionals from being opened


------------------------------------------------------------------------------

-- 0.2.9 Release --

- Initial parse support for generate blocks (for, if, case)

- Correct some issues with handling of clocking blocks. SVEditor is still
  skipping over the clocking-block content, but should result in fewer 
  parse mistakes.

------------------------------------------------------------------------------

-- 0.2.8 Release --

- Correct problems with expansion of environment variables in argument-file
  paths

- Correct problem with content assist on indexed array/queue fields

- Correct module-port parse bugs
    - sized un-typed ports (eg module foo([3:0] a); )
    - interface ports (eg module foo(interface a); )
    - interface ports with multi-dimension vectors
    - sized parameters


------------------------------------------------------------------------------
-- 0.2.7 Release --

- Correct a problem when opening a declaration in a file that isn't currently
  open in an instance of SVEditor. Now, an error is emited and a cast class
  is avoided.

- Correct bugs around auto-indent of pasted content

- Correct bug with indent of if/else when begin is on a new line

- Correct a problem with adaptive indent when the end point for adaptive 
  training is a comment. 

- Correct bug with pre-processor. Macro-embedded conditionals are now properly 
  supported

------------------------------------------------------------------------------

-- 0.2.6 Release --

- Correct a content-assist bug related to array and queue data types (#3046751)
  The cause was a parser bug that caused Array and Queue data types to not be 
  tagged properly.

- Correct a content-assist bug with method-containing expressions, such as
  field.task_call().<<CONTENT_ASSIST>>.

- Improved the Indenter to handle adaptive indent in a more-flexible and
  more-reliable manner

------------------------------------------------------------------------------
-- 0.2.5 Release --

- Correct problem with setting cursor location of Open Declaration (#3034640)

- Correct problems with compare and dump methods in the new TypeInfo classes.
  These caused problems with index loading (#3034574 and #3034577)

- Correct parse bugs with module ports
    - Untyped ports with specified directions
    - Modports: module foo(<interface>.<modport> mp);

- Correct argument-file include-path resolution order. Now, if an 
  identically-named file exists in multiple include directories, the correct
  file (first found, traversing the include paths in order) will  
  be included and used.

- Removed a dangling reference to the 'SystemVerilog Methodology Class' 
  wizard, which is a wizard for creating class templates that are specific
  to a methodology, such as OVM or VMM. This wizard was still accessible
  via the main menu 'New' menu, which should not be the case until this 
  work is complete.

- Add support for always variants (always_comb, always_iff, always_latch)

- Correct content-assist issue (#3038561) when document length is 0

- Update function-override logic to tag overridden virtual tasks/functions
  with 'virtual'

- Correct an indent problem with comment blocks. Comment lines following
  the initial line were incorrectly indented
  - Need to push a provisional indent when entering a scope. This provisional
    indent can be altered later when a non-comment element is detected.

------------------------------------------------------------------------------

-- 0.2.4 Release --

- Correct parse bugs with module parameters
    - empty parameter list
    - parameter declaration inside module

- Add parse support for locally-defined parameters

- Add parse support for typed-net elements

- Add basic parse support for nested interfaces and nested modules

------------------------------------------------------------------------------

-- 0.2.3 Release --

- Add additional tests for references to project-external paths from 
  argument file project paths

- Correct a bug with argument-file include paths having a trailing '/'. 
  For example: +incdir+../../../

- Correct bugs in project-external relative paths specified in an 
  argument file project path

- Correct a bug with module parsing that caused content assist to not be
  triggered very near the end of the module, due to an expected parse error

- Updated the content-assist scanner to be aware of comments within the
  source. This prevents content in a comment from interfering with 
  content assist.

- Correct a reference to the 'expression' Eclipse plug-in that prevented
  SVEditor from installing in some Eclipse versions. The 'expression' plug-in
  reference is now un-versioned.

- Add basic scanner support (ignore) for clocking blocks

- Add basic scanner support (ignore) for modports

- Fix bug with parsing of always expression. The new parser that markes
  parse errors made it apparent that there was a problem

- Correct parse bug with 'virtual interface' datatype

- Correct bug with handling of empty constraint block (#3031558)

- Correct bug with labeled covergroup

- Correct parsing of [net_type] [type_or_implicit] [elem]

- Update lexer to recognize time-unit constants

- Restored support for package Open Declaration from an import

-- 0.2.2 Release --

- Support content assist for SystemVerilog keywords

- Fix bugs, introduced by the new parser, in support for covergroup 
  content assist and added tests

- Enhance the Project Explorer with a Project Paths entry that allows the
  directory structure of indexes (workspace internal and external) to be 
  browsed. This makes it significantly easier to open a file that is part
  of an index that is outside the filesystem. It also makes it easier to
  see what is present in the index paths of a project.

- Enhanced Argument File index to support argument files that reference
  paths outside the workspace. An example of this case is shown in the
  OVM 'xbus' example. The example project is 'xbus', but the argument file
  in the project references the OVM library several directory levels 
  above -- outside the project directory.

- Enhance support for content assist in 'module' context
    - Ensure ports are parsed
    - Search ports (same as function parameters) when searching up for 
      content-assist proposals

-- 0.2.1 Release --

- Corrected a pretty severe auto-indent bug related to pasting the opening 
(and not closing) portion of a multi-line comment. Now SVEditor does not
attempt to auto-indent cases where newly-pasted content makes comment
boundaries ambiguous

- Correct a bug with hierarchy-based navigation (ie Open Declaration) that
caused navigation history to not be maintained properly

- Extensive changes to the parsing framework, which will example improvements
  to the accuracy and extent of parsing.

- Extended content assist to structs -- both typedef and inline-decl

- Extended content assist to comprehend extern functions and search the
  corresponding class scope

- Annotate editor with error markers from the parser. For now, this should 
  be helpful in understanding where the parser is encountering parser errors.
  As the parser adds features, this should be a useful tool for SystemVerilog
  developers.


-- 0.2.0 Release --

- Add basic support for code templates. Currently, no built-in code templates
  are provided, though contributions are very welcome. Suggestions for
  extending code-template support are, likewise, welcome.

-- 0.1.9 Release --

- Correct a macro-expansion bug with nested macros that was triggered 
  by the VMM library source

- Correct a bug with handling of endfunction/endtask with a end label 

-- 0.1.8 Release --

- Make auto-indenter adaptive to surrounding scope indent. This means that
  if class methods have the same indent as the class scope (aligned to margin),
  the auto-identer will indent the method body statements one tab in from the
  margin.

- Corrected a bug with auto-indent paste and strings with embedded 
  control characters. In this situation, the pasted content would 'disappear'.

- Enhance content-assist when editing parameterized classes by searching 
  class parameters as a data-type

- Enable full-file indent via CTRL-I. Previously, this operation was diabled.

- Resolved a bug in auto-indent scanner that caused some combinations of 
  empty lines to be collapsed into one

- Filter __sv_builtin classes from super-class proposal list

- Change default focus in 'New SV Class' wizard to 'Class Name' field

- Add scanner support for 'pure virtual' tasks/functions

- Auto-indent now recognizes foreach as a loop construct

-- 0.1.7 Release --

- Add class-creation wizard that supports browsing for a super-class and 
  implementing the constructor with super-constructor parameters


-- 0.1.6 Release --

- Correct include-pathing issue for nested defines. 

- Correct macro-resolution bug for macros defined in sub-included files

- Update list of supported directives. Most of these are ignored for now, but
  produce no errors.
    - `celldefine 
    - `endcelldefine
    - `line
    - `nounconnected_drive
    - `resetall
    - `unconnected_drive
    - `undef
    - `undefineall

- Fix project explorer to not display error markers as part of the file structure

-- 0.1.5 Release --

- Resolve a bug in indent support for always 

- Resolve a critical bug with file paths on Windows

-- 0.1.4 Release --

- Add content-assist support for class typedefs. Now, class typedefs are 
recognized as aliases for the underlying type.

- Correct a bug with content assist for macros having no parameters. 
Previously, these macros were displayed incorrectly in the content proposal.

- Correct a bug with content-assist on the RHS of an '='. 

- Correct a bug with expression indenting. Fix bug / add tests for indenting of covergroups, coverpoints.

- Fix bug with opening a file that exists in the root of a project

- Correct a windows-specific bug that resulted in the built-in library
  missing files

- Correct a bug with indenting pre-processor directives such as `timescale

- Collect and display errors as markers
    - Missing define
    - Missing include file
    - Annotate the parent index that manages the file 

- Expand testing of indexing
    - Library Index
        - Ensure new files are correctly merged in
            - On load, discovering a previously-missing file triggers an 
              index build (Workspace and Filesystem varieties)
            - During operation, adding a file that was previously a 
              missing include triggers index rebuild (Workspace only)
        - Ensure global defines are propagated
        - Ensure missing includes/defines are annotated
    - Argument File Index
        - On load, discovering an updated index triggers index rebuild
        - Ensure index is re-scanned when the argument file changes
        - Ensure global defines are propagated
        - Ensure missing includes/defines are annotated
    - Plugin Lib Index
        - Ensure new files added (ie new release) result in updated index. 
    - SourceCollection Index
        - Update structure-determining logic to recognize 
          package,module,interface, and program-based structures
        - Ensure global defines are propagated
        - Ensure included files are located
        - Ensure missing includes/defines are annotated

------------------------------------------------------------------------------

-- 0.1.3 Release --

- Change the way that files are associated with indexes. Previously, only the
containing project's indexes were checked to locate the index a file should
be associated with. Typical setup for projects with a single build file and 
multiple source locations do not work well with this scheme.  
Now, the following is done:
    - The file's containing project is checked to see if it manages the index.
      This gives local settings priority
    - Next, other open projects in the workspace are checked
    - Finally, shadow indexes in the projects are checked

- Correct bug with propagation of +define+ arguments from the argument file
to the index define map.

- Add Project Properties page for setting global pre-processor defines

- Update indexers to use global defines. Now, the user can provide global
defines -- ones, for instance, that might be provided directed to the 
compile command.

- Fixed a few minor bugs in indent support and added a few tests

- Fix a minor pre-processor bug with macro expansion

- Fix bug with indent of forever. Add test

- Add content-assist support for '= new()'. Now, content assist provides 
the constructor argument list.

- Correct a bug with the Type Hierarchy view where a non-extended class
is not shown.

- Add icon for Coverpoint Cross

- Add content-assist support for import. 

- Add content assist for covergroups and coverpoints
    - Support for accessing covergroup and sub-coverpoints in an expression
    - Support for built-in methods (get_coverage, sample, etc)
    - Support covergroup, coverpoint, and coverpoint cross options 


------------------------------------------------------------------------------

-- 0.1.2 Release --

- Add content-assist support for parameterized classes. Now, content assist
will parse and operate on the specialized class rather than its base type. 
This means that, for example, content assist can 'see through' a parameterized
member field.

- Improve content-assist support for dynamic arrays, queues, and 
associative arrays. Now, methods that are part of the type (ie queue) are 
provided as content-assist proposals.

- Add Class Hierarchy viewer. Selecting a class name in the editor and opening
the Hierarchy view via the shortcut (F4) or the context menu will display the
class super- and sub- class hierarchy. Class members for the selected class
are shown in a separate pane. The source location for Classes and members 
may be opened by double-clicking on the appropriate element in the 
Hierarchy viewer.

- Fix bug with accepting a expression content proposal with no leaf. 
For example: foo.<CTRL-SPACE>. Previously, performing this operation would
result in the content being inserted at the beginning of the document. 

- Apply auto-indent to content inserted by Override Methods dialog

- Correct a bug in the scanner with extern tasks/functions outside a 
class/package scope

- Fix auto-indent bugs
    - Support package as an indent scope
    - Resolve issues when typing at the very end of a document.
    - Properly indent class declarations within packages and modules
    - Correct issue with indenting extern task/function
    - Support fork/join* as an indent scope
    - Fix problem with pasting, with auto-indent, in the middle of a port map

- Remove OVM plugin library from distribution. Source from user's environment
is typically used.

- Add SystemVerilog system tasks and functions to the default library. These
now appear as content assist proposals

- Correct a bug with scanning class declarations that occur on a single line

------------------------------------------------------------------------------

-- 0.1.1 Release --

- Add the beginnings of an indenter. To activate, select text in the editor
and select <CTRL>-I. Currently, blocks such as classes, modules, 
tasks/functions, and begin/end blocks are supported. 
    - This is still fairly experimental functionality. Please report any
      issues you see!
    - Unclear how best to indent macro invocations, since many 
      are not terminated at statement boundaries (at least in OVM). 
      For now, assuming that macro invocations end at a line boundary.

- Update on-the-fly auto-indent to use the new indenter. This replaces a 
whole raft of heuristic code that was less than reliable. However, as noted
above, the new indenter is less than fully-tested, so expect some instability. 

- Support auto-indent for paste using the indenter. This functionality is 
only enabled if auto-indent is enabled in the SVEditor Preferences.

- Auto-indent is enabled by default for 'new' workspaces. For existing 
workspaces, the user will need to enable auto-indent via the SVEditor 
preferences page.

------------------------------------------------------------------------------

-- 0.1.0 Release --

- Ensure that changes to task/function arguments are updated in the database
when the file changes.

- Make expression parsing more selective with respect to quoted strings. 
Content assist adjacent to a string (eg in a $display() call) now works 
much better

- Corrected a lookup bug that prevented task/function parameters or locals
from being presented as content-assist proposals

- Added support for always/initial blocks and assigns to the scanner and 
outline view

- Direct debug output (enabled from SVEditor preferences page) to console
in active workbench.

- Update support for enumerated types. Enum types and values are presented
and typenames can be cross-referenced

- Update Outline view to show function return type

- Changed content-assist searches to be case-insensitive. The code architecture
is also now more modular, to permit easier future updates.

------------------------------------------------------------------------------

-- 0.0.9 Release --

- Corrected a bug with implicit-relative paths in an argument file. 
Previously, ./<path> and ../<path> were recognized as relative paths. 
Now <path> is also recognized as a relative path.

- Corrected a bug in processing virtual interface fields. The scanner was 
incorrectly identifying these fields as a change of scope. Interface is a 
first-level keyword, but virtual interface is a valid field.

- Corrected problem in parsing indexed expressions when extracting
root/trigger/leaf from an expression.

- Enhanced expression parsing (translation from text to SVDBItems) to account
for static references based as a class type: <class>::<field>::...

- Enhanced the lookup procedure performed by the editor on startup to 
determine which index manages a given source file. Extended to recognize
files from the filesystem that are managed by an index attached to a 
project in the workspace.

- Corrected a bug with class-field lookup (cross-linking and context assist) 
where the super-class hierarchy was not considered.

- Centralized lookup code for expressions, combining content-assist and
cross-linking lookup



------------------------------------------------------------------------------

-- 0.0.8 Release --

The 0.0.8 release contains major changes to SVEditor. 

The source-discovery mechanism has changed completely. Now, for best results, 
the user should provide SVEditor with paths to the package files and/or 
file lists that specify the source files. If a file is opened that is 
not part of a defined index, SVEditor will setup a temporary index containing 
just files in the parent directory.

Improvements have continued on the persistence support. On exit of Eclipse, 
SVEditor saves the parsed representation of all active indexes to the workspace. 
SVEditor is able to simply re-load the database from this save file if 
none of the SystemVerilog files have subseqently been modified. 
This can save a significant amount of time during Eclipse startup by reducing 
the amount of redundant parsing. 

Added logging infrastructure, including a method to control debug logging
from the preferences page and saving the debug log to a file in the workspace.


------------------------------------------------------------------------------

-- 0.0.7 Release --
    - Fix DR 2689430 -- problem with opening/closing/deleting a project in workspace
        - Sometimes a resource-change event is signaled with a null event
    - Add patch from <> for basic color preferences
    - Incorporate patch from <> for DR <> -- problem with paths on Windows
    - Fix problem with source cross-reference to classes declared 
      directly within a package. This issue did not affect classes declared
      within a package via an `include directive.
    - Add persistence support to prevent unchanged source files from being 
      re-parsed on every invocation
*   - Fix problem with resolving macros in the SourceCollection index
    - Expanded index support with the following new types
        - Source collection index -- examines file structure and attempts to 
          determine correct parse order based on include relationships
        - Library index -- entry point is the root file of a package-based
          library. Locates included files
        - Plugin library -- support for packaging common source in a plugin
          that can be distributed with SVEditor
    - 

------------------------------------------------------------------------------

-- 0.0.6 Release --

- Add support for 'open declaration' on included file
- Re-add support for includes and macro definitions in the editor outline
- Add support for open-declaration on a macro call
- Add beginnings of 'Override/Implement Methods' action to the editor context menu
    - Prompts the user for tasks/functions in the super class hierarchy 
      that can be overridden
    - Inserts task/function outlines
- [Development] Add an extension point that allows SystemVerilog libraries 
  to be packaged in a plug-in
- Begin adding support for core SystemVerilog classes (string for now)
- Add OVM 2.0.1 to as a built-in library
- Fix DR 2683568 -- scanner problem when parsing incomplete begin-end block
- Add basic support for DPI tasks/functions in the scanner
- Fixed a problem with content assist on task/function parameter names
- Added an icon for local variables and task parameters


------------------------------------------------------------------------------

-- 0.0.5 Release --

== Completely new pre-processor architecture. Files in a build-path directory
are processed in two passes now. First, the files are scanned for pre-processor
definitions, conditionals, and inclusions. Then, when a file is scanned, the
build context of the file is computed (ie which chain of files is likely to
include the file being parsed). This allows us to determine which macros
will be 'live' during file processing.

The new pre-processor architecture allows SVEditor to deal with the heavy 
macro use of libraries such as OVM. Now, for example, it is possible to
provide content-assist for class elements in OVM classes that are contributed
by macros (eg tasks in the various TLM port classes).

== Continued work on content-assist. Now, the expression surrounding the 
content-assist point is processed so better suggestions can be provided. 
Also, more context information from the class hierarchy is used. 
For example:

- given the classes:

class bar;
    ovm_master_port #(int, int)    p;

endclass

class foo extends bar;
    

    function void do_something();
       p.<CONTENT ASSIST> 
        
    endfunction

endclass


The content-assist processor recognizes that 'p' is the variable for 
content-assist, locates 'p' via the class hierarchy, and prompts for tasks,
functions, and fields in the class ovm_master_port.


- given the classes:

class bar;

    int a, b, c;

endclass


class foo;

    function bar get_bar();
    endfunction

    function void do_something();
        get_bar().<CONTENT ASSIST>
    endfunction

endclass


The content-assist processor recognizes the function 'get_bar', finds the 
return type, and prompts for fields, tasks, etc from the class bar.


== Added code templates to content assist. This provides argument templates
for tasks, functions, macros, and templated classes. 


== The content-assist processor can provide content-assist proposals for 
include files. Typing: `include <CONTENT ASSIST> or 
`include "prefix<CONTENT ASSIST> will present a list of matching 
include-file names.




20090102 -- Fix outline label provider
20090103 -- Eliminate duplicate proposals for include files
         -- Fixed indexing of files in workspace paths. Previously, only files
            in non-workspace build paths were added to the index. 
20090105 -- Correct skipping of constraint body. Constraint body is now ignored
         -- Pre-processor seems to not always ignore comment content
20090106 -- Correct problem with pre-processor that resulted in scanner incorrectly
            processing lines that end with a single-line comment.
         -- Correct problem with parsing identifiers directly followed by ':'. 
            For example, endfunction: myfunction
20090107 -- Update line numbers of SVDB items parsed from the live editor. Affected source
            is in SVDBFileMerger, SVDBItem, and SVDBScopeItem.

            

------------------------------------------------------------------------------

-- 0.0.4 Release --

20081202 -- Add brace-matching highlighting to editor
20081213 -- Remove conflict between JDT 'Open Declaration' shortcut and
            SVEditor's shortcut

          - Added a SVEditor build paths and include paths project-properties page

* Add a build paths and include paths property page
* Add support for including macros using `include and the file provider
* Fix bug in handling of extern tasks/functions
* Support indexing of elements on the build path
* Extended support for 'open declaration'
    * Navigation to class declarations defined on build path
* Add exclusions to Index class: .svn CVS, etc
* Enhance scanner
    - Improve support for macros
        * macros with parameters
        * Change structure of pre-processor and scanner for better pre-processor support
    * Scanner now parses 'extends' portion of class declaration
    * Scanner now parses parameters to class-type fields. Type parameters 
      are also displayed in the outline
* Basic support for content assist
    * Support content assist for `include directives
    * Support content assist for macro invocations
    * Prompt for classes on the build path
    * Prompt for tasks, functions and fields in the current scope (doesn't handle task parameters)
    * Prompt for tasks, functions, and members in the inheritance hierachy
    * Support icons on content-assist (helpful in seeing type and attributes of a suggestion)
* Ensure proper merging of current/new project settings
* Field-attribute icons on outline now update properly when the attributes
  change (ie protected -> local)
* Fix problems with line-number accuracy and macro substitution
    * Better, but still off-by-one occasionally
* Enhance 'open declaration' to use the index to traverse the class 
  hierarchy and find tasks, functions, fields

------------------------------------------------------------------------------

-- 0.0.3 Release --

20081101 - 
    - Add dedicated C-style comment detector for multi-line comments. Fixes
      cases where the Eclipse built-in multi-line pattern detector failed.

------------------------------------------------------------------------------

-- Future --

- Hover info-pops
    - Use same basic parsing strategy as content-assist, but use to drive info-pops that display
      information about the element under the cursor
    - Preserve and show attached comments

 - Begin work on users guide

 * Open Declaration Improvements
    * Add Open Declaration support for included files
    * Scan context, rather than just using highlighted term
    * Recognize 'super' and search hierarchy
 - Add auto-indent rules centered around begin/end and brackets
 - Add inheritance hierarchy viewer
 - Notification on build-path change. Ensure setting a new build path results in re-scanning
 - Need a better strategy for cross-editor navigation. We loose our build-path context when we switch to an editor for a file on the build path
 * Investigate mismatch between macro def and invocation parameter counts
 - Support folding of begin/end regions
 - Add Design Hierarchy view, showing modules and their instantiation     
   relationships
 - Some sort of library-specific macro filtering could be helpful. (eg don't expand `ovm_component_utils)

 * Update build-path management to support
    - 'library' entries -- single file that is the root of a library (eg OVM)
    - filtering source from 

 * Support read-only source in a plugin. Useful for libraries (OVM/VMM).
    - A library index processes files as follows:
        - Entry point is root file
        - Any file included by that file or sub-files is included in the index
        - Process recursively:
            - At each level, create an SVDBFileTree object to work with
            - Reference parent's SVDBFileTree object
                -> Must 'pre-process' SVDBFileTree to resolve conditionals
            - Monitor inclusions. As files are included:
                - Ensure they exist as SVDBFileTree objects
                - Add to the DefineProvider
                - Check whether file has already been parsed. 
                    - Add to TODO list if not
 - Add basic support for Verilog .f files. This might be a concise way to specify the build process...
 - Need a multi-level sort for content proposals
    - order by name
    - 
    - order by scope distance (local variables, parameters, tf, types, etc)
    - any 


